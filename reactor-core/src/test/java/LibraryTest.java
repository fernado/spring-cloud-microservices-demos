/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import static org.junit.Assert.assertTrue;

import java.time.Duration;
import java.util.Arrays;
import java.util.List;

import org.junit.Test;

import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public class LibraryTest {

  static List<String> words =
      Arrays.asList("the", "quick", "brown", "fox", "jumps", "over", "the", "lazy", "dog");

  @Test
  public void simple() {
    Flux<String> fewwords = Flux.just("Hello", "world");
    Flux<String> lon = Flux.fromIterable(words);
    fewwords.subscribe(System.out::println);
    System.out.println();
    lon.subscribe(System.out::println);
  }

  @Test
  public void missingLetter() {
    Flux<String> many = Flux.fromIterable(words).flatMap(word -> Flux.fromArray(word.split("")))
        .distinct().log().sort().zipWith(Flux.range(1, Integer.MAX_VALUE),
            (string, count) -> String.format("%2d, %s", count, string));
    many.subscribe(System.out::println);
  }

  @Test
  public void thePause() throws Exception {
    Flux<String> hellos = Mono.just("Hello").concatWith(Mono.just("World"))
        .delaySubscription(Duration.ofMillis(5000));
    hellos.subscribe(System.out::println);
    System.out.println("I am past subscribe . . .");
    Thread.sleep(12000);
  }

  @Test
  public void giveMeFirst() throws Exception{
    Mono<String> a = Mono.just("Late to the party!")
        .delaySubscription(Duration.ofSeconds(4));

    Flux<String> b = Flux.just("time to", "move", "on")
        .delaySubscriptionMillis(2000);

    Flux.firstEmitting(a, b)
      .toIterable()
      .forEach(System.out::println);

    Thread.sleep(12000);
  }
}
